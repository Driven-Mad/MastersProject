// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Ava.h"
#include "Ava.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1Ava() {}
	void AAntelope::StaticRegisterNativesAAntelope()
	{
	}
	IMPLEMENT_CLASS(AAntelope, 1488228363);
	void AEscapePoint::StaticRegisterNativesAEscapePoint()
	{
	}
	IMPLEMENT_CLASS(AEscapePoint, 462117881);
	void ARoutePoint::StaticRegisterNativesARoutePoint()
	{
	}
	IMPLEMENT_CLASS(ARoutePoint, 488136421);
	void AAntelopeAIController::StaticRegisterNativesAAntelopeAIController()
	{
	}
	IMPLEMENT_CLASS(AAntelopeAIController, 4101188995);
	void AAvaGameMode::StaticRegisterNativesAAvaGameMode()
	{
	}
	IMPLEMENT_CLASS(AAvaGameMode, 1064099451);
	void UBTServiceSearchForPlayer::StaticRegisterNativesUBTServiceSearchForPlayer()
	{
	}
	IMPLEMENT_CLASS(UBTServiceSearchForPlayer, 1098623683);
	void UBTTaskFindClosestEscapePoint::StaticRegisterNativesUBTTaskFindClosestEscapePoint()
	{
	}
	IMPLEMENT_CLASS(UBTTaskFindClosestEscapePoint, 3703746931);
	void UBTTaskFindNextRoutePoint::StaticRegisterNativesUBTTaskFindNextRoutePoint()
	{
	}
	IMPLEMENT_CLASS(UBTTaskFindNextRoutePoint, 3342134226);
static class UEnum* ItemDataVariables_StaticEnum()
{
	extern AVA_API class UPackage* Z_Construct_UPackage__Script_Ava();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern AVA_API class UEnum* Z_Construct_UEnum_Ava_ItemDataVariables();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Ava_ItemDataVariables, Z_Construct_UPackage__Script_Ava(), TEXT("ItemDataVariables"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ItemDataVariables(ItemDataVariables_StaticEnum, TEXT("/Script/Ava"), TEXT("ItemDataVariables"), false, nullptr, nullptr);
static class UEnum* Item_StaticEnum()
{
	extern AVA_API class UPackage* Z_Construct_UPackage__Script_Ava();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern AVA_API class UEnum* Z_Construct_UEnum_Ava_Item();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Ava_Item, Z_Construct_UPackage__Script_Ava(), TEXT("Item"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_Item(Item_StaticEnum, TEXT("/Script/Ava"), TEXT("Item"), false, nullptr, nullptr);
	void ADataFactory::StaticRegisterNativesADataFactory()
	{
		FNativeFunctionRegistrar::RegisterFunction(ADataFactory::StaticClass(), "AccessTMapItems",(Native)&ADataFactory::execAccessTMapItems);
		FNativeFunctionRegistrar::RegisterFunction(ADataFactory::StaticClass(), "Get3DRepresentationForItem",(Native)&ADataFactory::execGet3DRepresentationForItem);
		FNativeFunctionRegistrar::RegisterFunction(ADataFactory::StaticClass(), "GetIconForItem",(Native)&ADataFactory::execGetIconForItem);
		FNativeFunctionRegistrar::RegisterFunction(ADataFactory::StaticClass(), "GetIconSelectedForItem",(Native)&ADataFactory::execGetIconSelectedForItem);
		FNativeFunctionRegistrar::RegisterFunction(ADataFactory::StaticClass(), "getItemDescription",(Native)&ADataFactory::execgetItemDescription);
		FNativeFunctionRegistrar::RegisterFunction(ADataFactory::StaticClass(), "GetItemType",(Native)&ADataFactory::execGetItemType);
	}
	IMPLEMENT_CLASS(ADataFactory, 665307648);
	void ADoor::StaticRegisterNativesADoor()
	{
		FNativeFunctionRegistrar::RegisterFunction(ADoor::StaticClass(), "Open",(Native)&ADoor::execOpen);
		FNativeFunctionRegistrar::RegisterFunction(ADoor::StaticClass(), "TimelineFloatReturn",(Native)&ADoor::execTimelineFloatReturn);
	}
	IMPLEMENT_CLASS(ADoor, 82753366);
	void APushPullItem::StaticRegisterNativesAPushPullItem()
	{
	}
	IMPLEMENT_CLASS(APushPullItem, 612926316);
	void APickUpItem::StaticRegisterNativesAPickUpItem()
	{
	}
	IMPLEMENT_CLASS(APickUpItem, 2620333142);
	void AMainCharacter::StaticRegisterNativesAMainCharacter()
	{
		FNativeFunctionRegistrar::RegisterFunction(AMainCharacter::StaticClass(), "BeginOverLap",(Native)&AMainCharacter::execBeginOverLap);
		FNativeFunctionRegistrar::RegisterFunction(AMainCharacter::StaticClass(), "ExitOverLap",(Native)&AMainCharacter::execExitOverLap);
		FNativeFunctionRegistrar::RegisterFunction(AMainCharacter::StaticClass(), "TimelineFloatReturn",(Native)&AMainCharacter::execTimelineFloatReturn);
	}
	IMPLEMENT_CLASS(AMainCharacter, 543374909);
	void UMainGameUI::StaticRegisterNativesUMainGameUI()
	{
	}
	IMPLEMENT_CLASS(UMainGameUI, 2666245711);
	void UMainMenu::StaticRegisterNativesUMainMenu()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMainMenu::StaticClass(), "Play",(Native)&UMainMenu::execPlay);
		FNativeFunctionRegistrar::RegisterFunction(UMainMenu::StaticClass(), "Quit",(Native)&UMainMenu::execQuit);
	}
	IMPLEMENT_CLASS(UMainMenu, 1695913138);
	void AOfferingPit::StaticRegisterNativesAOfferingPit()
	{
	}
	IMPLEMENT_CLASS(AOfferingPit, 1334031975);
	void AOfferingStatue::StaticRegisterNativesAOfferingStatue()
	{
	}
	IMPLEMENT_CLASS(AOfferingStatue, 3544506977);
	void APaintingObject::StaticRegisterNativesAPaintingObject()
	{
	}
	IMPLEMENT_CLASS(APaintingObject, 4143494583);
	void AStatueObject::StaticRegisterNativesAStatueObject()
	{
	}
	IMPLEMENT_CLASS(AStatueObject, 3409006047);
	void APuzzle::StaticRegisterNativesAPuzzle()
	{
	}
	IMPLEMENT_CLASS(APuzzle, 921395248);
	void ABlackPuzzle::StaticRegisterNativesABlackPuzzle()
	{
	}
	IMPLEMENT_CLASS(ABlackPuzzle, 363871007);
	void ABluePuzzle::StaticRegisterNativesABluePuzzle()
	{
	}
	IMPLEMENT_CLASS(ABluePuzzle, 2033035204);
	void AGreenPuzzle::StaticRegisterNativesAGreenPuzzle()
	{
	}
	IMPLEMENT_CLASS(AGreenPuzzle, 2259903230);
	void ARedPuzzle::StaticRegisterNativesARedPuzzle()
	{
	}
	IMPLEMENT_CLASS(ARedPuzzle, 3024183061);
	void AWhitePuzzle::StaticRegisterNativesAWhitePuzzle()
	{
	}
	IMPLEMENT_CLASS(AWhitePuzzle, 3516386994);
	void AYellowPuzzle::StaticRegisterNativesAYellowPuzzle()
	{
	}
	IMPLEMENT_CLASS(AYellowPuzzle, 3862261997);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTree_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint();
	AIMODULE_API class UClass* Z_Construct_UClass_AAIController();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_BlackboardBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_BlackboardBase();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUserWidget();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox_NoRegister();

	AVA_API class UClass* Z_Construct_UClass_AAntelope_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AAntelope();
	AVA_API class UClass* Z_Construct_UClass_AEscapePoint_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AEscapePoint();
	AVA_API class UClass* Z_Construct_UClass_ARoutePoint_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_ARoutePoint();
	AVA_API class UClass* Z_Construct_UClass_AAntelopeAIController_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AAntelopeAIController();
	AVA_API class UClass* Z_Construct_UClass_AAvaGameMode_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AAvaGameMode();
	AVA_API class UClass* Z_Construct_UClass_UBTServiceSearchForPlayer_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_UBTServiceSearchForPlayer();
	AVA_API class UClass* Z_Construct_UClass_UBTTaskFindClosestEscapePoint_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_UBTTaskFindClosestEscapePoint();
	AVA_API class UClass* Z_Construct_UClass_UBTTaskFindNextRoutePoint_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_UBTTaskFindNextRoutePoint();
	AVA_API class UEnum* Z_Construct_UEnum_Ava_ItemDataVariables();
	AVA_API class UEnum* Z_Construct_UEnum_Ava_Item();
	AVA_API class UFunction* Z_Construct_UFunction_ADataFactory_AccessTMapItems();
	AVA_API class UFunction* Z_Construct_UFunction_ADataFactory_Get3DRepresentationForItem();
	AVA_API class UFunction* Z_Construct_UFunction_ADataFactory_GetIconForItem();
	AVA_API class UFunction* Z_Construct_UFunction_ADataFactory_GetIconSelectedForItem();
	AVA_API class UFunction* Z_Construct_UFunction_ADataFactory_getItemDescription();
	AVA_API class UFunction* Z_Construct_UFunction_ADataFactory_GetItemType();
	AVA_API class UClass* Z_Construct_UClass_ADataFactory_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_ADataFactory();
	AVA_API class UFunction* Z_Construct_UFunction_ADoor_Open();
	AVA_API class UFunction* Z_Construct_UFunction_ADoor_TimelineFloatReturn();
	AVA_API class UClass* Z_Construct_UClass_ADoor_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_ADoor();
	AVA_API class UClass* Z_Construct_UClass_APushPullItem_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_APushPullItem();
	AVA_API class UClass* Z_Construct_UClass_APickUpItem_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_APickUpItem();
	AVA_API class UFunction* Z_Construct_UFunction_AMainCharacter_BeginOverLap();
	AVA_API class UFunction* Z_Construct_UFunction_AMainCharacter_ExitOverLap();
	AVA_API class UFunction* Z_Construct_UFunction_AMainCharacter_TimelineFloatReturn();
	AVA_API class UClass* Z_Construct_UClass_AMainCharacter_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AMainCharacter();
	AVA_API class UClass* Z_Construct_UClass_UMainGameUI_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_UMainGameUI();
	AVA_API class UFunction* Z_Construct_UFunction_UMainMenu_Play();
	AVA_API class UFunction* Z_Construct_UFunction_UMainMenu_Quit();
	AVA_API class UClass* Z_Construct_UClass_UMainMenu_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_UMainMenu();
	AVA_API class UClass* Z_Construct_UClass_AOfferingPit_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AOfferingPit();
	AVA_API class UClass* Z_Construct_UClass_AOfferingStatue_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AOfferingStatue();
	AVA_API class UClass* Z_Construct_UClass_APaintingObject_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_APaintingObject();
	AVA_API class UClass* Z_Construct_UClass_AStatueObject_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AStatueObject();
	AVA_API class UClass* Z_Construct_UClass_APuzzle_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_APuzzle();
	AVA_API class UClass* Z_Construct_UClass_ABlackPuzzle_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_ABlackPuzzle();
	AVA_API class UClass* Z_Construct_UClass_ABluePuzzle_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_ABluePuzzle();
	AVA_API class UClass* Z_Construct_UClass_AGreenPuzzle_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AGreenPuzzle();
	AVA_API class UClass* Z_Construct_UClass_ARedPuzzle_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_ARedPuzzle();
	AVA_API class UClass* Z_Construct_UClass_AWhitePuzzle_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AWhitePuzzle();
	AVA_API class UClass* Z_Construct_UClass_AYellowPuzzle_NoRegister();
	AVA_API class UClass* Z_Construct_UClass_AYellowPuzzle();
	AVA_API class UPackage* Z_Construct_UPackage__Script_Ava();
	UClass* Z_Construct_UClass_AAntelope_NoRegister()
	{
		return AAntelope::StaticClass();
	}
	UClass* Z_Construct_UClass_AAntelope()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AAntelope::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_walkingSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("walkingSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(walkingSpeed, AAntelope), 0x0010000000000001);
				UProperty* NewProp_runningSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("runningSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(runningSpeed, AAntelope), 0x0010000000000001);
				UProperty* NewProp_m_AntelopeBehaviourTree = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("m_AntelopeBehaviourTree"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(m_AntelopeBehaviourTree, AAntelope), 0x0010000000000001, Z_Construct_UClass_UBehaviorTree_NoRegister());
				UProperty* NewProp_m_CollisionSphere = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("m_CollisionSphere"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(m_CollisionSphere, AAntelope), 0x00100000000a000d, Z_Construct_UClass_USphereComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Antelope.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Antelope.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_walkingSpeed, TEXT("Category"), TEXT("AIVariables"));
				MetaData->SetValue(NewProp_walkingSpeed, TEXT("ModuleRelativePath"), TEXT("Antelope.h"));
				MetaData->SetValue(NewProp_walkingSpeed, TEXT("ToolTip"), TEXT("@brief AIVariables - Antelopes walk speed\n@param walkingSpeed - the speed that is applied when the Antelopes enters the walking state"));
				MetaData->SetValue(NewProp_runningSpeed, TEXT("Category"), TEXT("AIVariables"));
				MetaData->SetValue(NewProp_runningSpeed, TEXT("ModuleRelativePath"), TEXT("Antelope.h"));
				MetaData->SetValue(NewProp_runningSpeed, TEXT("ToolTip"), TEXT("@brief AIVariables - Antelopes run speed\n@param runningSpeed - the speed that is applied when the Antelopes enters the running state"));
				MetaData->SetValue(NewProp_m_AntelopeBehaviourTree, TEXT("Category"), TEXT("AIVariables"));
				MetaData->SetValue(NewProp_m_AntelopeBehaviourTree, TEXT("ModuleRelativePath"), TEXT("Antelope.h"));
				MetaData->SetValue(NewProp_m_AntelopeBehaviourTree, TEXT("ToolTip"), TEXT("@brief AIVariables - controls the behaviour of this character.\n@param m_AntelopeBehaviourTree - the behaviour tree assosicated with the character."));
				MetaData->SetValue(NewProp_m_CollisionSphere, TEXT("Category"), TEXT("AIVariables"));
				MetaData->SetValue(NewProp_m_CollisionSphere, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_m_CollisionSphere, TEXT("ModuleRelativePath"), TEXT("Antelope.h"));
				MetaData->SetValue(NewProp_m_CollisionSphere, TEXT("ToolTip"), TEXT("@brief AIVariables - Check if the player is currently praying at the specified statue.\n@param overlappingSphere - USphere Component for overlapping events."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAntelope(Z_Construct_UClass_AAntelope, &AAntelope::StaticClass, TEXT("AAntelope"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AAntelope);
	UClass* Z_Construct_UClass_AEscapePoint_NoRegister()
	{
		return AEscapePoint::StaticClass();
	}
	UClass* Z_Construct_UClass_AEscapePoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ATargetPoint();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AEscapePoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EscapePoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("EscapePoint.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AEscapePoint(Z_Construct_UClass_AEscapePoint, &AEscapePoint::StaticClass, TEXT("AEscapePoint"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AEscapePoint);
	UClass* Z_Construct_UClass_ARoutePoint_NoRegister()
	{
		return ARoutePoint::StaticClass();
	}
	UClass* Z_Construct_UClass_ARoutePoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ATargetPoint();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = ARoutePoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RouteNumber = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RouteNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RouteNumber, ARoutePoint), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("RoutePoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("RoutePoint.h"));
				MetaData->SetValue(NewProp_RouteNumber, TEXT("Category"), TEXT("RouteID"));
				MetaData->SetValue(NewProp_RouteNumber, TEXT("ModuleRelativePath"), TEXT("RoutePoint.h"));
				MetaData->SetValue(NewProp_RouteNumber, TEXT("ToolTip"), TEXT("@brief RouteID - Used as an identifier to choose a selected path by the artist rather than random.\n@param RouteNumber -  unique identy number."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ARoutePoint(Z_Construct_UClass_ARoutePoint, &ARoutePoint::StaticClass, TEXT("ARoutePoint"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ARoutePoint);
	UClass* Z_Construct_UClass_AAntelopeAIController_NoRegister()
	{
		return AAntelopeAIController::StaticClass();
	}
	UClass* Z_Construct_UClass_AAntelopeAIController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AAIController();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AAntelopeAIController::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900280;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_playerName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("playerName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(playerName, AAntelopeAIController), 0x0010000000010001);
				UProperty* NewProp_playerPositionName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("playerPositionName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(playerPositionName, AAntelopeAIController), 0x0010000000010001);
				UProperty* NewProp_myPositionName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("myPositionName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(myPositionName, AAntelopeAIController), 0x0010000000010001);
				UProperty* NewProp_currentRouteWayPointName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("currentRouteWayPointName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(currentRouteWayPointName, AAntelopeAIController), 0x0010000000010001);
				UProperty* NewProp_currentEscapeWayPointName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("currentEscapeWayPointName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(currentEscapeWayPointName, AAntelopeAIController), 0x0010000000010001);
				UProperty* NewProp_targetLocationName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("targetLocationName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(targetLocationName, AAntelopeAIController), 0x0010000000010001);
				UProperty* NewProp_myBehaviourTreeComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("myBehaviourTreeComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(myBehaviourTreeComponent, AAntelopeAIController), 0x0010000000080009, Z_Construct_UClass_UBehaviorTreeComponent_NoRegister());
				UProperty* NewProp_myBlackBoardComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("myBlackBoardComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(myBlackBoardComponent, AAntelopeAIController), 0x0010000000080009, Z_Construct_UClass_UBlackboardComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_playerName, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_playerName, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(NewProp_playerName, TEXT("ToolTip"), TEXT("@brief Accessing name within our blackboard for the player itself."));
				MetaData->SetValue(NewProp_playerPositionName, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_playerPositionName, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(NewProp_playerPositionName, TEXT("ToolTip"), TEXT("@brief Accessing name within our blackboard for players position"));
				MetaData->SetValue(NewProp_myPositionName, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_myPositionName, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(NewProp_myPositionName, TEXT("ToolTip"), TEXT("@brief Accessing name within our blackboard for this characters position"));
				MetaData->SetValue(NewProp_currentRouteWayPointName, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_currentRouteWayPointName, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(NewProp_currentRouteWayPointName, TEXT("ToolTip"), TEXT("@brief Accessing name within our blackboard for current route point"));
				MetaData->SetValue(NewProp_currentEscapeWayPointName, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_currentEscapeWayPointName, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(NewProp_currentEscapeWayPointName, TEXT("ToolTip"), TEXT("@brief Accessing name within our blackboard for current escape point"));
				MetaData->SetValue(NewProp_targetLocationName, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_targetLocationName, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(NewProp_targetLocationName, TEXT("ToolTip"), TEXT("Different Names for variables within our blackboard.\n----------------------------------------------------------------------------------------------------------------------\n @brief Accessing name within our blackboard for target location"));
				MetaData->SetValue(NewProp_myBehaviourTreeComponent, TEXT("Category"), TEXT("AntelopeAIController"));
				MetaData->SetValue(NewProp_myBehaviourTreeComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_myBehaviourTreeComponent, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(NewProp_myBehaviourTreeComponent, TEXT("ToolTip"), TEXT("@brief Behaviour tree component for the AI Controller"));
				MetaData->SetValue(NewProp_myBlackBoardComponent, TEXT("Category"), TEXT("AntelopeAIController"));
				MetaData->SetValue(NewProp_myBlackBoardComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_myBlackBoardComponent, TEXT("ModuleRelativePath"), TEXT("AntelopeAIController.h"));
				MetaData->SetValue(NewProp_myBlackBoardComponent, TEXT("ToolTip"), TEXT("@brief Blackboard component for the AI controller"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAntelopeAIController(Z_Construct_UClass_AAntelopeAIController, &AAntelopeAIController::StaticClass, TEXT("AAntelopeAIController"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AAntelopeAIController);
	UClass* Z_Construct_UClass_AAvaGameMode_NoRegister()
	{
		return AAvaGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_AAvaGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AAvaGameMode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2090028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AvaGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("AvaGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAvaGameMode(Z_Construct_UClass_AAvaGameMode, &AAvaGameMode::StaticClass, TEXT("AAvaGameMode"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AAvaGameMode);
	UClass* Z_Construct_UClass_UBTServiceSearchForPlayer_NoRegister()
	{
		return UBTServiceSearchForPlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTServiceSearchForPlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTService_BlackboardBase();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = UBTServiceSearchForPlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BTServiceSearchForPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BTServiceSearchForPlayer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTServiceSearchForPlayer(Z_Construct_UClass_UBTServiceSearchForPlayer, &UBTServiceSearchForPlayer::StaticClass, TEXT("UBTServiceSearchForPlayer"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTServiceSearchForPlayer);
	UClass* Z_Construct_UClass_UBTTaskFindClosestEscapePoint_NoRegister()
	{
		return UBTTaskFindClosestEscapePoint::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTaskFindClosestEscapePoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_BlackboardBase();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = UBTTaskFindClosestEscapePoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BTTaskFindClosestEscapePoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BTTaskFindClosestEscapePoint.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTaskFindClosestEscapePoint(Z_Construct_UClass_UBTTaskFindClosestEscapePoint, &UBTTaskFindClosestEscapePoint::StaticClass, TEXT("UBTTaskFindClosestEscapePoint"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTaskFindClosestEscapePoint);
	UClass* Z_Construct_UClass_UBTTaskFindNextRoutePoint_NoRegister()
	{
		return UBTTaskFindNextRoutePoint::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTaskFindNextRoutePoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_BlackboardBase();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = UBTTaskFindNextRoutePoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BTTaskFindNextRoutePoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BTTaskFindNextRoutePoint.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTaskFindNextRoutePoint(Z_Construct_UClass_UBTTaskFindNextRoutePoint, &UBTTaskFindNextRoutePoint::StaticClass, TEXT("UBTTaskFindNextRoutePoint"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTaskFindNextRoutePoint);
	UEnum* Z_Construct_UEnum_Ava_ItemDataVariables()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Ava();
		extern uint32 Get_Z_Construct_UEnum_Ava_ItemDataVariables_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ItemDataVariables"), 0, Get_Z_Construct_UEnum_Ava_ItemDataVariables_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ItemDataVariables"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ItemDataVariables::itemMeshFilepath")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ItemDataVariables::itemSpriteFilepath")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ItemDataVariables::itemSelectedSpriteFilepath")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ItemDataVariables::itemName")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ItemDataVariables::itemDescription")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ItemDataVariables::itemEnumIdentifier")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ItemDataVariables::ItemDataVariables_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ItemDataVariables");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("itemDescription.DisplayName"), TEXT("itemDescription"));
			MetaData->SetValue(ReturnEnum, TEXT("itemEnumIdentifier.DisplayName"), TEXT("itemEnumIdentifier"));
			MetaData->SetValue(ReturnEnum, TEXT("itemMeshFilepath.DisplayName"), TEXT("itemMeshFilepath"));
			MetaData->SetValue(ReturnEnum, TEXT("itemName.DisplayName"), TEXT("itemName"));
			MetaData->SetValue(ReturnEnum, TEXT("itemSelectedSpriteFilepath.DisplayName"), TEXT("itemSrpiteFilepath"));
			MetaData->SetValue(ReturnEnum, TEXT("itemSpriteFilepath.DisplayName"), TEXT("itemSrpiteFilepath"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("@brief Data variable enums for our items to be used with TMaps"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Ava_ItemDataVariables_CRC() { return 1731521118U; }
	UEnum* Z_Construct_UEnum_Ava_Item()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Ava();
		extern uint32 Get_Z_Construct_UEnum_Ava_Item_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("Item"), 0, Get_Z_Construct_UEnum_Ava_Item_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Item"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::BLANK")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Scroll01")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Scroll02")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Scroll03")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Scroll04")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Scroll05")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Scroll06")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Scroll07")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Scroll08")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Bracelet")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Item01")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Item02")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Item03")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Trash01")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Trash02")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Trash03")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Trash04")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Item::Item_MAX")), 17));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("Item");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BLANK.DisplayName"), TEXT("BLANK"));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Bracelet.DisplayName"), TEXT("Bracelet"));
			MetaData->SetValue(ReturnEnum, TEXT("Item01.DisplayName"), TEXT("Item01"));
			MetaData->SetValue(ReturnEnum, TEXT("Item02.DisplayName"), TEXT("Item02"));
			MetaData->SetValue(ReturnEnum, TEXT("Item03.DisplayName"), TEXT("Item03"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll01.DisplayName"), TEXT("Scroll01"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll02.DisplayName"), TEXT("Scroll02"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll03.DisplayName"), TEXT("Scroll03"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll04.DisplayName"), TEXT("Scroll04"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll05.DisplayName"), TEXT("Scroll05"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll06.DisplayName"), TEXT("Scroll06"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll07.DisplayName"), TEXT("Scroll07"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll08.DisplayName"), TEXT("Scroll08"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("@brief enums for items to be used with TMaps"));
			MetaData->SetValue(ReturnEnum, TEXT("Trash01.DisplayName"), TEXT("Trash01"));
			MetaData->SetValue(ReturnEnum, TEXT("Trash02.DisplayName"), TEXT("Trash02"));
			MetaData->SetValue(ReturnEnum, TEXT("Trash03.DisplayName"), TEXT("Trash03"));
			MetaData->SetValue(ReturnEnum, TEXT("Trash04.DisplayName"), TEXT("Trash04"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Ava_Item_CRC() { return 1346486820U; }
	UFunction* Z_Construct_UFunction_ADataFactory_AccessTMapItems()
	{
		struct DataFactory_eventAccessTMapItems_Parms
		{
			TEnumAsByte<Item> Item_type;
			TEnumAsByte<ItemDataVariables> Item_variable;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADataFactory();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AccessTMapItems"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DataFactory_eventAccessTMapItems_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, DataFactory_eventAccessTMapItems_Parms), 0x0010000000000580);
			UProperty* NewProp_Item_variable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item_variable"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Item_variable, DataFactory_eventAccessTMapItems_Parms), 0x0010000000000080, Z_Construct_UEnum_Ava_ItemDataVariables());
			UProperty* NewProp_Item_type = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item_type"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Item_type, DataFactory_eventAccessTMapItems_Parms), 0x0010000000000080, Z_Construct_UEnum_Ava_Item());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Items"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief Called when you need to access the maps data variables\n@param Item_type - The item that you want to look up.\n@param Item_variable - The ItemDataVariables that you want to look up.\n@return returns a string containing the information OF Item_Type, and the vraible Item_"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADataFactory_Get3DRepresentationForItem()
	{
		struct DataFactory_eventGet3DRepresentationForItem_Parms
		{
			TEnumAsByte<Item> Item_type;
			UStaticMesh* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADataFactory();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Get3DRepresentationForItem"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DataFactory_eventGet3DRepresentationForItem_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, DataFactory_eventGet3DRepresentationForItem_Parms), 0x0010000000000580, Z_Construct_UClass_UStaticMesh_NoRegister());
			UProperty* NewProp_Item_type = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item_type"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Item_type, DataFactory_eventGet3DRepresentationForItem_Parms), 0x0010000000000080, Z_Construct_UEnum_Ava_Item());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Items"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief Called when you need to get the 3D mesh for Item_Type.\n@param Item_type - The item that you want to look up.\n@return returns the static mesh of the item Item_Type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADataFactory_GetIconForItem()
	{
		struct DataFactory_eventGetIconForItem_Parms
		{
			TEnumAsByte<Item> Item_type;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADataFactory();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIconForItem"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DataFactory_eventGetIconForItem_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, DataFactory_eventGetIconForItem_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Item_type = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item_type"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Item_type, DataFactory_eventGetIconForItem_Parms), 0x0010000000000080, Z_Construct_UEnum_Ava_Item());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Items"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief Called when you need to get the Item_Type 2D Icon (Normal)\n@param Item_type - The item that you want to look up.\n@return returns the texture for the icon of the item Item_Type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADataFactory_GetIconSelectedForItem()
	{
		struct DataFactory_eventGetIconSelectedForItem_Parms
		{
			TEnumAsByte<Item> Item_type;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADataFactory();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIconSelectedForItem"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DataFactory_eventGetIconSelectedForItem_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, DataFactory_eventGetIconSelectedForItem_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Item_type = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item_type"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Item_type, DataFactory_eventGetIconSelectedForItem_Parms), 0x0010000000000080, Z_Construct_UEnum_Ava_Item());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Items"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief Called when you need to get the Item_Type 2D Icon (Hovered)\n@param Item_type - The item that you want to look up.\n@return returns the texture for the icon of the item Item_Type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADataFactory_getItemDescription()
	{
		struct DataFactory_eventgetItemDescription_Parms
		{
			TEnumAsByte<Item> ItemToSpawn;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADataFactory();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getItemDescription"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DataFactory_eventgetItemDescription_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, DataFactory_eventgetItemDescription_Parms), 0x0010000000000580);
			UProperty* NewProp_ItemToSpawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ItemToSpawn"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ItemToSpawn, DataFactory_eventgetItemDescription_Parms), 0x0010000000000080, Z_Construct_UEnum_Ava_Item());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Items"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief Called when you need to get the Item_Type description\n@param Item_type - The item that you want to look up.\n@return returns the items discription in a string."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADataFactory_GetItemType()
	{
		struct DataFactory_eventGetItemType_Parms
		{
			FString enumType;
			FString enumName;
			TEnumAsByte<Item> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADataFactory();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetItemType"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DataFactory_eventGetItemType_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, DataFactory_eventGetItemType_Parms), 0x0010000000000580, Z_Construct_UEnum_Ava_Item());
			UProperty* NewProp_enumName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("enumName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(enumName, DataFactory_eventGetItemType_Parms), 0x0010000000000080);
			UProperty* NewProp_enumType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("enumType"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(enumType, DataFactory_eventGetItemType_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Items"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief Called when you need to get the Item based on a string type and name.\n@param enumType - The enum that you want to look up.\n@param enumName - The item that you want to look up.\n@return returns the items discription in a string."));
			MetaData->SetValue(NewProp_enumName, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_enumType, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ADataFactory_NoRegister()
	{
		return ADataFactory::StaticClass();
	}
	UClass* Z_Construct_UClass_ADataFactory()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = ADataFactory::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ADataFactory_AccessTMapItems());
				OuterClass->LinkChild(Z_Construct_UFunction_ADataFactory_Get3DRepresentationForItem());
				OuterClass->LinkChild(Z_Construct_UFunction_ADataFactory_GetIconForItem());
				OuterClass->LinkChild(Z_Construct_UFunction_ADataFactory_GetIconSelectedForItem());
				OuterClass->LinkChild(Z_Construct_UFunction_ADataFactory_getItemDescription());
				OuterClass->LinkChild(Z_Construct_UFunction_ADataFactory_GetItemType());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADataFactory_AccessTMapItems(), "AccessTMapItems"); // 466643443
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADataFactory_Get3DRepresentationForItem(), "Get3DRepresentationForItem"); // 3313739281
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADataFactory_GetIconForItem(), "GetIconForItem"); // 167864636
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADataFactory_GetIconSelectedForItem(), "GetIconSelectedForItem"); // 1222786158
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADataFactory_getItemDescription(), "getItemDescription"); // 3389674651
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADataFactory_GetItemType(), "GetItemType"); // 3426595263
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DataFactory.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("DataFactory.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADataFactory(Z_Construct_UClass_ADataFactory, &ADataFactory::StaticClass, TEXT("ADataFactory"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADataFactory);
	UFunction* Z_Construct_UFunction_ADoor_Open()
	{
		UObject* Outer=Z_Construct_UClass_ADoor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Open"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Door.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief - Function that opens to door using timeline above."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADoor_TimelineFloatReturn()
	{
		struct Door_eventTimelineFloatReturn_Parms
		{
			float val;
		};
		UObject* Outer=Z_Construct_UClass_ADoor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimelineFloatReturn"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(Door_eventTimelineFloatReturn_Parms));
			UProperty* NewProp_val = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("val"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(val, Door_eventTimelineFloatReturn_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Door.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief - Function to read in the value from the timeline and where to place the door.\n@param - Val = Float at current time in timeline."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ADoor_NoRegister()
	{
		return ADoor::StaticClass();
	}
	UClass* Z_Construct_UClass_ADoor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = ADoor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ADoor_Open());
				OuterClass->LinkChild(Z_Construct_UFunction_ADoor_TimelineFloatReturn());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_boxCollider = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("boxCollider"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(boxCollider, ADoor), 0x001000000008001d, Z_Construct_UClass_UBoxComponent_NoRegister());
				UProperty* NewProp_designatedMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("designatedMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(designatedMesh, ADoor), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
				UProperty* NewProp_fCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("fCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(fCurve, ADoor), 0x0010000000000000, Z_Construct_UClass_UCurveFloat_NoRegister());
				UProperty* NewProp_ScoreTimeline = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScoreTimeline"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ScoreTimeline, ADoor), 0x0010000000080008, Z_Construct_UClass_UTimelineComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADoor_Open(), "Open"); // 3145075467
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADoor_TimelineFloatReturn(), "TimelineFloatReturn"); // 1395027020
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Door.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Door.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_boxCollider, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("Category"), TEXT("DoorVariables"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("ModuleRelativePath"), TEXT("Door.h"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("ToolTip"), TEXT("@brief DoorVariables - box collider which wil act as our root component for the door.\n@param boxCollider - this is box component which will be our root."));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("Category"), TEXT("DoorVariables"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ModuleRelativePath"), TEXT("Door.h"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ToolTip"), TEXT("@brief DoorVariables - The visual representation of this actor in 3D form.\n@param designatedMesh - Static mesh component 3D mesh."));
				MetaData->SetValue(NewProp_fCurve, TEXT("ModuleRelativePath"), TEXT("Door.h"));
				MetaData->SetValue(NewProp_fCurve, TEXT("ToolTip"), TEXT("@brief DoorVariables -  for the artist to draw to be used with timeline of door opening.\n@param fCurve - curve designated by artist."));
				MetaData->SetValue(NewProp_ScoreTimeline, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ScoreTimeline, TEXT("ModuleRelativePath"), TEXT("Door.h"));
				MetaData->SetValue(NewProp_ScoreTimeline, TEXT("ToolTip"), TEXT("@brief DoorVariables - Will allow us to play our timeline via a curve.\n@param ScoreTimeline - pointer to a timeline component."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADoor(Z_Construct_UClass_ADoor, &ADoor::StaticClass, TEXT("ADoor"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADoor);
	UClass* Z_Construct_UClass_APushPullItem_NoRegister()
	{
		return APushPullItem::StaticClass();
	}
	UClass* Z_Construct_UClass_APushPullItem()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = APushPullItem::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(cappedY, APushPullItem, bool);
				UProperty* NewProp_cappedY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("cappedY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(cappedY, APushPullItem), 0x0010000000020015, CPP_BOOL_PROPERTY_BITMASK(cappedY, APushPullItem), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(cappedX, APushPullItem, bool);
				UProperty* NewProp_cappedX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("cappedX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(cappedX, APushPullItem), 0x0010000000020015, CPP_BOOL_PROPERTY_BITMASK(cappedX, APushPullItem), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LockZ, APushPullItem, bool);
				UProperty* NewProp_LockZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LockZ, APushPullItem), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(LockZ, APushPullItem), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LockX, APushPullItem, bool);
				UProperty* NewProp_LockX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LockX, APushPullItem), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(LockX, APushPullItem), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LockY, APushPullItem, bool);
				UProperty* NewProp_LockY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LockY, APushPullItem), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(LockY, APushPullItem), sizeof(bool), true);
				UProperty* NewProp_yMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("yMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(yMax, APushPullItem), 0x0010000000000005);
				UProperty* NewProp_yMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("yMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(yMin, APushPullItem), 0x0010000000000005);
				UProperty* NewProp_xMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("xMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(xMax, APushPullItem), 0x0010000000000005);
				UProperty* NewProp_xMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("xMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(xMin, APushPullItem), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(constrainY, APushPullItem, bool);
				UProperty* NewProp_constrainY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("constrainY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(constrainY, APushPullItem), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(constrainY, APushPullItem), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(constrainX, APushPullItem, bool);
				UProperty* NewProp_constrainX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("constrainX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(constrainX, APushPullItem), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(constrainX, APushPullItem), sizeof(bool), true);
				UProperty* NewProp_sphereCollider = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("sphereCollider"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(sphereCollider, APushPullItem), 0x001000000008001d, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_designatedMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("designatedMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(designatedMesh, APushPullItem), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_cappedY, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_cappedY, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_cappedY, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_cappedY, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - informs us when the player has reached the yMin or yMax\nAvailable to be read anywhere to allow the disconnection of the push and pull from the player.\n@param cappedY - boolean check."));
				MetaData->SetValue(NewProp_cappedX, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_cappedX, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_cappedX, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_cappedX, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - informs us when the player has reached the xMin or xMax\nAvailable to be read anywhere to allow the disconnection of the push and pull from the player.\n@param cappedX - boolean check."));
				MetaData->SetValue(NewProp_LockZ, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LockZ, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_LockZ, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_LockZ, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - check if artist wants lock the X position entirely.\n@param LockZ - boolean check."));
				MetaData->SetValue(NewProp_LockX, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LockX, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_LockX, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_LockX, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - check if artist wants lock the X position entirely.\n@param LockX - boolean check."));
				MetaData->SetValue(NewProp_LockY, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LockY, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_LockY, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_LockY, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - check if artist wants lock the Y position entirely.\n@param LockY - boolean check."));
				MetaData->SetValue(NewProp_yMax, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_yMax, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_yMax, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_yMax, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - the maximum Y value that the artist wants to constrain the item too.\n@param yMax - float value to constrain the items movement.  - Works if constrainY is selected."));
				MetaData->SetValue(NewProp_yMin, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_yMin, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_yMin, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_yMin, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - the minimum Y value that the artist wants to constrain the item too.\n@param yMin - float value to constrain the items movement. - Works if constrainY is selected."));
				MetaData->SetValue(NewProp_xMax, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_xMax, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_xMax, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_xMax, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - the maximum X value that the artist wants to constrain the item too.\n@param xMax - float value to constrain the items movement.  - Works if constrainX is selected."));
				MetaData->SetValue(NewProp_xMin, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_xMin, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_xMin, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_xMin, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - the minimum X value that the artist wants to constrain the item too.\n@param xMin - float value to constrain the items movement.  - Works if constrainX is selected."));
				MetaData->SetValue(NewProp_constrainY, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_constrainY, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_constrainY, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_constrainY, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - check if artist wants to constrain the Y position.\n@param constrainY - boolean check."));
				MetaData->SetValue(NewProp_constrainX, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_constrainX, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_constrainX, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_constrainX, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - check if artist wants to constrain the X position.\n@param constrainX - boolean check."));
				MetaData->SetValue(NewProp_sphereCollider, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_sphereCollider, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_sphereCollider, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_sphereCollider, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_sphereCollider, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - Check if the player is currently overlapping the push and pull item.\n@param sphereCollider - USphere Component for collision."));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("Category"), TEXT("pushableItemVariables"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ModuleRelativePath"), TEXT("PushPullItem.h"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ToolTip"), TEXT("@brief pushableItemVariables - The visual representation of this actor in 3D form.\n@param designatedMesh - Static mesh component 3D mesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_APushPullItem(Z_Construct_UClass_APushPullItem, &APushPullItem::StaticClass, TEXT("APushPullItem"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(APushPullItem);
	UClass* Z_Construct_UClass_APickUpItem_NoRegister()
	{
		return APickUpItem::StaticClass();
	}
	UClass* Z_Construct_UClass_APickUpItem()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = APickUpItem::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LockZ, APickUpItem, bool);
				UProperty* NewProp_LockZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LockZ, APickUpItem), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(LockZ, APickUpItem), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LockX, APickUpItem, bool);
				UProperty* NewProp_LockX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LockX, APickUpItem), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(LockX, APickUpItem), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LockY, APickUpItem, bool);
				UProperty* NewProp_LockY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LockY, APickUpItem), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(LockY, APickUpItem), sizeof(bool), true);
				UProperty* NewProp_itemType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("itemType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(itemType, APickUpItem), 0x0010000000000005, Z_Construct_UEnum_Ava_Item());
				UProperty* NewProp_boxCollider = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("boxCollider"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(boxCollider, APickUpItem), 0x001000000008001d, Z_Construct_UClass_UBoxComponent_NoRegister());
				UProperty* NewProp_designatedMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("designatedMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(designatedMesh, APickUpItem), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("pickUpItem.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("pickUpItem.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_LockZ, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LockZ, TEXT("Category"), TEXT("pickup"));
				MetaData->SetValue(NewProp_LockZ, TEXT("ModuleRelativePath"), TEXT("pickUpItem.h"));
				MetaData->SetValue(NewProp_LockZ, TEXT("ToolTip"), TEXT("@brief pickup - check if artist wants lock the X position entirely.\n@param LockZ - boolean check."));
				MetaData->SetValue(NewProp_LockX, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LockX, TEXT("Category"), TEXT("pickup"));
				MetaData->SetValue(NewProp_LockX, TEXT("ModuleRelativePath"), TEXT("pickUpItem.h"));
				MetaData->SetValue(NewProp_LockX, TEXT("ToolTip"), TEXT("@brief pickup - check if artist wants lock the X position entirely.\n@param LockX - boolean check."));
				MetaData->SetValue(NewProp_LockY, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LockY, TEXT("Category"), TEXT("pickup"));
				MetaData->SetValue(NewProp_LockY, TEXT("ModuleRelativePath"), TEXT("pickUpItem.h"));
				MetaData->SetValue(NewProp_LockY, TEXT("ToolTip"), TEXT("@brief pickup - check if artist wants lock the Y position entirely.\n@param LockY - boolean check."));
				MetaData->SetValue(NewProp_itemType, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_itemType, TEXT("Category"), TEXT("pickup"));
				MetaData->SetValue(NewProp_itemType, TEXT("ModuleRelativePath"), TEXT("pickUpItem.h"));
				MetaData->SetValue(NewProp_itemType, TEXT("ToolTip"), TEXT("@brief pickup - Used to designate certain types of paths within our game such as 3D representation etc.\n@param itemType - this is box component which will be our root."));
				MetaData->SetValue(NewProp_boxCollider, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("Category"), TEXT("pickup"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("ModuleRelativePath"), TEXT("pickUpItem.h"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("ToolTip"), TEXT("@brief pickup - box collider which wil act as our root component for the items.\n@param boxCollider - this is box component which will be our root."));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("Category"), TEXT("pickup"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ModuleRelativePath"), TEXT("pickUpItem.h"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ToolTip"), TEXT("@brief pickup - The visual representation of this actor in 3D form.\n@param designatedMesh - Static mesh component 3D mesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_APickUpItem(Z_Construct_UClass_APickUpItem, &APickUpItem::StaticClass, TEXT("APickUpItem"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(APickUpItem);
	UFunction* Z_Construct_UFunction_AMainCharacter_BeginOverLap()
	{
		struct MainCharacter_eventBeginOverLap_Parms
		{
			AActor* MyOverlappedActor;
			AActor* OtherActor;
		};
		UObject* Outer=Z_Construct_UClass_AMainCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeginOverLap"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MainCharacter_eventBeginOverLap_Parms));
			UProperty* NewProp_OtherActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, MainCharacter_eventBeginOverLap_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_MyOverlappedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyOverlappedActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MyOverlappedActor, MainCharacter_eventBeginOverLap_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behaviour"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief BeginOverlap - Tells us when this actor overlaps with another.\n@param MyOverlappedActor - The actor you want to check who it overlaps with.\n@param OtherActor - the actor it overlaps with."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMainCharacter_ExitOverLap()
	{
		struct MainCharacter_eventExitOverLap_Parms
		{
			AActor* MyOverlappedActor;
			AActor* OtherActor;
		};
		UObject* Outer=Z_Construct_UClass_AMainCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExitOverLap"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MainCharacter_eventExitOverLap_Parms));
			UProperty* NewProp_OtherActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, MainCharacter_eventExitOverLap_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_MyOverlappedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyOverlappedActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MyOverlappedActor, MainCharacter_eventExitOverLap_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behaviour"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief ExitOverLap - Tells us when this actor exits an overlap with another.\n@param MyOverlappedActor - The actor you want to check who it overlaps with.\n@param OtherActor - the actor it overlaps with."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMainCharacter_TimelineFloatReturn()
	{
		struct MainCharacter_eventTimelineFloatReturn_Parms
		{
			float val;
		};
		UObject* Outer=Z_Construct_UClass_AMainCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimelineFloatReturn"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(MainCharacter_eventTimelineFloatReturn_Parms));
			UProperty* NewProp_val = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("val"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(val, MainCharacter_eventTimelineFloatReturn_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief - Function to read in the value from the timeline and where to place the door.\n@param - Val = Float at current time in timeline."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AMainCharacter_NoRegister()
	{
		return AMainCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_AMainCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AMainCharacter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_AMainCharacter_BeginOverLap());
				OuterClass->LinkChild(Z_Construct_UFunction_AMainCharacter_ExitOverLap());
				OuterClass->LinkChild(Z_Construct_UFunction_AMainCharacter_TimelineFloatReturn());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanSprint, AMainCharacter, bool);
				UProperty* NewProp_bCanSprint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanSprint"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanSprint, AMainCharacter), 0x0010000000020015, CPP_BOOL_PROPERTY_BITMASK(bCanSprint, AMainCharacter), sizeof(bool), true);
				UProperty* NewProp_SprintToIdleCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SprintToIdleCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SprintToIdleCurve, AMainCharacter), 0x0010000000000015, Z_Construct_UClass_UCurveFloat_NoRegister());
				UProperty* NewProp_RunToIdleCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RunToIdleCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RunToIdleCurve, AMainCharacter), 0x0010000000000015, Z_Construct_UClass_UCurveFloat_NoRegister());
				UProperty* NewProp_SprintToIdleTimeline = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SprintToIdleTimeline"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SprintToIdleTimeline, AMainCharacter), 0x001000000008001d, Z_Construct_UClass_UTimelineComponent_NoRegister());
				UProperty* NewProp_RunToIdleTimeline = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RunToIdleTimeline"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RunToIdleTimeline, AMainCharacter), 0x001000000008001d, Z_Construct_UClass_UTimelineComponent_NoRegister());
				UProperty* NewProp_jumpDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("jumpDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(jumpDelay, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_Inventory = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inventory"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Inventory, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_Inventory_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Inventory, TEXT("Inventory"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Ava_Item());
				UProperty* NewProp_characterArmHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("characterArmHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(characterArmHeight, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_pushPullTraceCheckDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("pushPullTraceCheckDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(pushPullTraceCheckDistance, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_overlappingSphere = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("overlappingSphere"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(overlappingSphere, AMainCharacter), 0x00100000000a001d, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_cameraDegreeCap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("cameraDegreeCap"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(cameraDegreeCap, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_lookRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("lookRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(lookRate, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_turnRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("turnRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(turnRate, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_FollowCamera = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FollowCamera"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(FollowCamera, AMainCharacter), 0x00100000000a001d, Z_Construct_UClass_UCameraComponent_NoRegister());
				UProperty* NewProp_CameraBoom = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraBoom"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CameraBoom, AMainCharacter), 0x00100000000a001d, Z_Construct_UClass_USpringArmComponent_NoRegister());
				UProperty* NewProp_pushPullSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("pushPullSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(pushPullSpeed, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_sprintSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("sprintSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(sprintSpeed, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_runSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("runSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(runSpeed, AMainCharacter), 0x0010000000000005);
				UProperty* NewProp_walkSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("walkSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(walkSpeed, AMainCharacter), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopJumping, AMainCharacter, bool);
				UProperty* NewProp_bStopJumping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStopJumping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopJumping, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bStopJumping, AMainCharacter), sizeof(bool), true);
				UProperty* NewProp_leftOrRightPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("leftOrRightPlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(leftOrRightPlayer, AMainCharacter), 0x0010000000020005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsNoLocomotionInput, AMainCharacter, bool);
				UProperty* NewProp_bIsNoLocomotionInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsNoLocomotionInput"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsNoLocomotionInput, AMainCharacter), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsNoLocomotionInput, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPlayerGoingBack, AMainCharacter, bool);
				UProperty* NewProp_bIsPlayerGoingBack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPlayerGoingBack"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPlayerGoingBack, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsPlayerGoingBack, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPlayerGoingForward, AMainCharacter, bool);
				UProperty* NewProp_bIsPlayerGoingForward = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPlayerGoingForward"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPlayerGoingForward, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsPlayerGoingForward, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPlayerGoingRight, AMainCharacter, bool);
				UProperty* NewProp_bIsPlayerGoingRight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPlayerGoingRight"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPlayerGoingRight, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsPlayerGoingRight, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPlayerGoingLeft, AMainCharacter, bool);
				UProperty* NewProp_bIsPlayerGoingLeft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPlayerGoingLeft"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPlayerGoingLeft, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsPlayerGoingLeft, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPickingUp, AMainCharacter, bool);
				UProperty* NewProp_bIsPickingUp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPickingUp"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPickingUp, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsPickingUp, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsInteracting, AMainCharacter, bool);
				UProperty* NewProp_bIsInteracting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsInteracting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsInteracting, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsInteracting, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPushPulling, AMainCharacter, bool);
				UProperty* NewProp_bIsPushPulling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPushPulling"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPushPulling, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsPushPulling, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPraying, AMainCharacter, bool);
				UProperty* NewProp_bIsPraying = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPraying"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPraying, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsPraying, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsInInventory, AMainCharacter, bool);
				UProperty* NewProp_bIsInInventory = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsInInventory"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsInInventory, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsInInventory, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsIdle, AMainCharacter, bool);
				UProperty* NewProp_bIsIdle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsIdle"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsIdle, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsIdle, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsJumping, AMainCharacter, bool);
				UProperty* NewProp_bIsJumping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsJumping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsJumping, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsJumping, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsWalking, AMainCharacter, bool);
				UProperty* NewProp_bIsWalking = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsWalking"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsWalking, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsWalking, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsRunning, AMainCharacter, bool);
				UProperty* NewProp_bIsRunning = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsRunning"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsRunning, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsRunning, AMainCharacter), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSprinting, AMainCharacter, bool);
				UProperty* NewProp_bIsSprinting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsSprinting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSprinting, AMainCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsSprinting, AMainCharacter), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AMainCharacter_BeginOverLap(), "BeginOverLap"); // 3823987685
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AMainCharacter_ExitOverLap(), "ExitOverLap"); // 1569009058
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AMainCharacter_TimelineFloatReturn(), "TimelineFloatReturn"); // 2945827452
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bCanSprint, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_bCanSprint, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bCanSprint, TEXT("ToolTip"), TEXT("@brief can the player sprint currently?"));
				MetaData->SetValue(NewProp_SprintToIdleCurve, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_SprintToIdleCurve, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_SprintToIdleCurve, TEXT("ToolTip"), TEXT("@brief CharacterComponents -  The curve for the Sprint to Idle timeline. Must go from 0 -> 1\n@param SprintToIdleCurve - curve designated by artist."));
				MetaData->SetValue(NewProp_RunToIdleCurve, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_RunToIdleCurve, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_RunToIdleCurve, TEXT("ToolTip"), TEXT("@brief CharacterComponents -  The curve for the Run to Idle timeline. Must go from 0 -> 1\n@param RunToIdleCurve - curve designated by artist."));
				MetaData->SetValue(NewProp_SprintToIdleTimeline, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_SprintToIdleTimeline, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SprintToIdleTimeline, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_SprintToIdleTimeline, TEXT("ToolTip"), TEXT("@brief CharacterComponents - Will allow us to play our timeline via a curve.\n@param SprintToIdleTimeline - pointer to a timeline component."));
				MetaData->SetValue(NewProp_RunToIdleTimeline, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_RunToIdleTimeline, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RunToIdleTimeline, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_RunToIdleTimeline, TEXT("ToolTip"), TEXT("@brief CharacterComponents - Will allow us to play our timeline via a curve.\n@param RunToIdleTimeline - pointer to a timeline component."));
				MetaData->SetValue(NewProp_jumpDelay, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_jumpDelay, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_jumpDelay, TEXT("ToolTip"), TEXT("@brief CharacterComponents - jump delay before jump is played.\n@param jumpDelay - this will delay the jump"));
				MetaData->SetValue(NewProp_Inventory, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_Inventory, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_Inventory, TEXT("ToolTip"), TEXT("@brief CharacterComponents - an array that stores all the inventory objects.\n@param Inventory - this array stores all the inventory objects for the player."));
				MetaData->SetValue(NewProp_characterArmHeight, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_characterArmHeight, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_characterArmHeight, TEXT("ToolTip"), TEXT("@brief CharacterComponents - characters arm height.\n@param characterArmHeight - this will increase the height that allows for the push and pull to be enabled."));
				MetaData->SetValue(NewProp_pushPullTraceCheckDistance, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_pushPullTraceCheckDistance, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_pushPullTraceCheckDistance, TEXT("ToolTip"), TEXT("@brief CharacterComponents - Characters push and pull trace distance\n@param pushPullTraceCheckDistance - the distance from the center of the actors mesh forward that the artists wish to\nfor push and pull"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("Category"), TEXT("CharacterComponents"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ToolTip"), TEXT("@brief CharacterComponents - Check if the player is currently praying at the specified statue.\n@param overlappingSphere - USphere Component for overlapping events."));
				MetaData->SetValue(NewProp_cameraDegreeCap, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_cameraDegreeCap, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_cameraDegreeCap, TEXT("ToolTip"), TEXT("@brief Camera - camera cap for lookRate in degrees, which would stop the camera from going too far down or up."));
				MetaData->SetValue(NewProp_lookRate, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_lookRate, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_lookRate, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_lookRate, TEXT("ToolTip"), TEXT("@brief Camera - characters camera look speed\n@param lookRate - the speed the camera looks up and down with."));
				MetaData->SetValue(NewProp_turnRate, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_turnRate, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_turnRate, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_turnRate, TEXT("ToolTip"), TEXT("@brief Camera - characters camera turn speed\n@param turnRate - the speed the camera turns left and right with."));
				MetaData->SetValue(NewProp_FollowCamera, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_FollowCamera, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_FollowCamera, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_FollowCamera, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_FollowCamera, TEXT("ToolTip"), TEXT("@brief Camera -  The camera that we'll be using to view our scene from."));
				MetaData->SetValue(NewProp_CameraBoom, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_CameraBoom, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_CameraBoom, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CameraBoom, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_CameraBoom, TEXT("ToolTip"), TEXT("@brief Camera -  The camaera boom which will stick our camera at a length from our character while also being diverse to\nspring back and forth depending on collision."));
				MetaData->SetValue(NewProp_pushPullSpeed, TEXT("Category"), TEXT("CharacterSpeeds"));
				MetaData->SetValue(NewProp_pushPullSpeed, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_pushPullSpeed, TEXT("ToolTip"), TEXT("@brief CharacterState - characters push and pull speed\n@param pushPullSpeed - the speed that is applied when the character enters the bIsPushPulling state"));
				MetaData->SetValue(NewProp_sprintSpeed, TEXT("Category"), TEXT("CharacterSpeeds"));
				MetaData->SetValue(NewProp_sprintSpeed, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_sprintSpeed, TEXT("ToolTip"), TEXT("@brief CharacterState - Characters sprint speed.\n@param sprintSpeed - the speed that is applied when the character enters the bIsSprinting state"));
				MetaData->SetValue(NewProp_runSpeed, TEXT("Category"), TEXT("CharacterSpeeds"));
				MetaData->SetValue(NewProp_runSpeed, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_runSpeed, TEXT("ToolTip"), TEXT("@brief CharacterSpeeds - Characters run speed\n@param runSpeed - the speed that is applied when the character enters the bIsRunning state"));
				MetaData->SetValue(NewProp_walkSpeed, TEXT("Category"), TEXT("CharacterSpeeds"));
				MetaData->SetValue(NewProp_walkSpeed, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_walkSpeed, TEXT("ToolTip"), TEXT("CHARACTER SPEEDS\n--------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------\n@brief CharacterSpeeds - Characters walk speed.\n@param walkSpeed - the speed that is applied when the character enters the bIsWalking state"));
				MetaData->SetValue(NewProp_bStopJumping, TEXT("Category"), TEXT("PlayerInput"));
				MetaData->SetValue(NewProp_bStopJumping, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bStopJumping, TEXT("ToolTip"), TEXT("@brief PlayerInput - Player has stopped jumping\n@param bStopJumping - player is no longer jumping."));
				MetaData->SetValue(NewProp_leftOrRightPlayer, TEXT("Category"), TEXT("PlayerInput"));
				MetaData->SetValue(NewProp_leftOrRightPlayer, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_leftOrRightPlayer, TEXT("ToolTip"), TEXT("@brief PlayerInput - a value between -12 and 12 that shows the player going left/right."));
				MetaData->SetValue(NewProp_bIsNoLocomotionInput, TEXT("Category"), TEXT("PlayerInput"));
				MetaData->SetValue(NewProp_bIsNoLocomotionInput, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsNoLocomotionInput, TEXT("ToolTip"), TEXT("@brief PlayerInput - Player has not entered any locomotion commands.\n@param bIsNoLocomotionInput - are NO commands for locomotion being applied."));
				MetaData->SetValue(NewProp_bIsPlayerGoingBack, TEXT("Category"), TEXT("PlayerInput"));
				MetaData->SetValue(NewProp_bIsPlayerGoingBack, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsPlayerGoingBack, TEXT("ToolTip"), TEXT("@brief PlayerInput - Player has entered a go backward command\n@param bIsPlayerGoingBack - is the player giving a command that would move the player backward."));
				MetaData->SetValue(NewProp_bIsPlayerGoingForward, TEXT("Category"), TEXT("PlayerInput"));
				MetaData->SetValue(NewProp_bIsPlayerGoingForward, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsPlayerGoingForward, TEXT("ToolTip"), TEXT("@brief PlayerInput - Player has entered a go forward command\n@param bIsPlayerGoingForward - is the player giving a command that would move the player forward."));
				MetaData->SetValue(NewProp_bIsPlayerGoingRight, TEXT("Category"), TEXT("PlayerInput"));
				MetaData->SetValue(NewProp_bIsPlayerGoingRight, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsPlayerGoingRight, TEXT("ToolTip"), TEXT("@brief PlayerInput - Player has entered a turn right command\n@param bIsPlayerGoingRight - is the player giving a command that would turn the player right."));
				MetaData->SetValue(NewProp_bIsPlayerGoingLeft, TEXT("Category"), TEXT("PlayerInput"));
				MetaData->SetValue(NewProp_bIsPlayerGoingLeft, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsPlayerGoingLeft, TEXT("ToolTip"), TEXT("@brief PlayerInput - Player has entered a turn left command\n@param bIsPlayerGoingLeft - is the player giving a command that would turn the player left."));
				MetaData->SetValue(NewProp_bIsPickingUp, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsPickingUp, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsPickingUp, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is picking up an item\n@param bIsPickingUp - has player pciked up an item"));
				MetaData->SetValue(NewProp_bIsInteracting, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsInteracting, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsInteracting, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is intereacting\n@param bIsInteracting - has player pressed the interaction trigger. This will return to false when player releases trigger"));
				MetaData->SetValue(NewProp_bIsPushPulling, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsPushPulling, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsPushPulling, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is pushing/pulling\n@param bIsPushPulling - has player pressed the push/pull trigger. This will return to false when player releases trigger\nor when other conditions are met."));
				MetaData->SetValue(NewProp_bIsPraying, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsPraying, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsPraying, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is praying\n@param bIsPraying - has player pressed the praying trigger. Needs to be set back to false in the animation event\n                      via a notifier at the end of the animation."));
				MetaData->SetValue(NewProp_bIsInInventory, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsInInventory, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsInInventory, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is In Invetory.\n@param bIsInInventory - has player pressed the inventory trigger, if so flip/flop between true and false."));
				MetaData->SetValue(NewProp_bIsIdle, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsIdle, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsIdle, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is Idle\n@param bIsIdle - is the player not moving, this is set based on speed."));
				MetaData->SetValue(NewProp_bIsJumping, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsJumping, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsJumping, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is Jumping\n@param bIsJumping - is the player pressing the jump triggering button. This will return to false when player releases trigger"));
				MetaData->SetValue(NewProp_bIsWalking, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsWalking, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsWalking, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is Walking\n@param bIsWalking - is the player Walking, this is set based on speed && when trigger is pressed (Trigger for keyboard)"));
				MetaData->SetValue(NewProp_bIsRunning, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsRunning, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsRunning, TEXT("ToolTip"), TEXT("@brief CharacterState - Character is Running\n@param bIsRunning - is the player running, this is set based on speed."));
				MetaData->SetValue(NewProp_bIsSprinting, TEXT("Category"), TEXT("CharacterStates"));
				MetaData->SetValue(NewProp_bIsSprinting, TEXT("ModuleRelativePath"), TEXT("MainCharacter.h"));
				MetaData->SetValue(NewProp_bIsSprinting, TEXT("ToolTip"), TEXT("CHARACTER STATES\n--------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------\n@brief CharacterState - Character is Sprinting\n@param bIsSprinting - is the player pressing the sprinting triggering button. This will return to false when player releases trigger"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AMainCharacter(Z_Construct_UClass_AMainCharacter, &AMainCharacter::StaticClass, TEXT("AMainCharacter"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AMainCharacter);
	UClass* Z_Construct_UClass_UMainGameUI_NoRegister()
	{
		return UMainGameUI::StaticClass();
	}
	UClass* Z_Construct_UClass_UMainGameUI()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UUserWidget();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = UMainGameUI::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_playerReference = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("playerReference"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(playerReference, UMainGameUI), 0x0010000000000001, Z_Construct_UClass_AMainCharacter_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MainGameUI.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("MainGameUI.h"));
				MetaData->SetValue(NewProp_playerReference, TEXT("Category"), TEXT("GameUI"));
				MetaData->SetValue(NewProp_playerReference, TEXT("ModuleRelativePath"), TEXT("MainGameUI.h"));
				MetaData->SetValue(NewProp_playerReference, TEXT("ToolTip"), TEXT("@brief GameUI - Player reference to be used within the functions of this class.\n@param playerReference - Player pointer."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMainGameUI(Z_Construct_UClass_UMainGameUI, &UMainGameUI::StaticClass, TEXT("UMainGameUI"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMainGameUI);
	UFunction* Z_Construct_UFunction_UMainMenu_Play()
	{
		UObject* Outer=Z_Construct_UClass_UMainMenu();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Play"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MyUUserWidgetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("MainMenu.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief Called when player clicks \"Play\", will load up the palace level."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMainMenu_Quit()
	{
		UObject* Outer=Z_Construct_UClass_UMainMenu();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Quit"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MyUUserWidgetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("MainMenu.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@brief Called when player clicks \"Quit\", will quit the game."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMainMenu_NoRegister()
	{
		return UMainMenu::StaticClass();
	}
	UClass* Z_Construct_UClass_UMainMenu()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UUserWidget();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = UMainMenu::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMainMenu_Play());
				OuterClass->LinkChild(Z_Construct_UFunction_UMainMenu_Quit());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMainMenu_Play(), "Play"); // 3136904398
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMainMenu_Quit(), "Quit"); // 1249445651
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MainMenu.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("MainMenu.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMainMenu(Z_Construct_UClass_UMainMenu, &UMainMenu::StaticClass, TEXT("UMainMenu"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMainMenu);
	UClass* Z_Construct_UClass_AOfferingPit_NoRegister()
	{
		return AOfferingPit::StaticClass();
	}
	UClass* Z_Construct_UClass_AOfferingPit()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AOfferingPit::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bItemOffered, AOfferingPit, bool);
				UProperty* NewProp_bItemOffered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bItemOffered"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bItemOffered, AOfferingPit), 0x0010000000020015, CPP_BOOL_PROPERTY_BITMASK(bItemOffered, AOfferingPit), sizeof(bool), true);
				UProperty* NewProp_requiredItem = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("requiredItem"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(requiredItem, AOfferingPit), 0x0010000000000015, Z_Construct_UEnum_Ava_Item());
				UProperty* NewProp_overlappingSphere = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("overlappingSphere"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(overlappingSphere, AOfferingPit), 0x001000000008001d, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_offeringPitMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("offeringPitMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(offeringPitMesh, AOfferingPit), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("OfferingPit.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("OfferingPit.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bItemOffered, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_bItemOffered, TEXT("Category"), TEXT("OfferingPitVariables"));
				MetaData->SetValue(NewProp_bItemOffered, TEXT("ModuleRelativePath"), TEXT("OfferingPit.h"));
				MetaData->SetValue(NewProp_bItemOffered, TEXT("ToolTip"), TEXT("@brief OfferingPitVariables -  check if the item has been offered.\n@param bItemOffered - boolean check."));
				MetaData->SetValue(NewProp_requiredItem, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_requiredItem, TEXT("Category"), TEXT("OfferingPitVariables"));
				MetaData->SetValue(NewProp_requiredItem, TEXT("ModuleRelativePath"), TEXT("OfferingPit.h"));
				MetaData->SetValue(NewProp_requiredItem, TEXT("ToolTip"), TEXT("@brief OfferingPitVariables -  required item to complete this puzzle.\n@param requiredItem - an Item placed in the scene."));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("Category"), TEXT("OfferingPitVariables"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ModuleRelativePath"), TEXT("OfferingPit.h"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ToolTip"), TEXT("@brief OfferingPitVariables - Check if the player is currently overlapping the offering statue\n@param overlappingSphere - USphere Component for collision."));
				MetaData->SetValue(NewProp_offeringPitMesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_offeringPitMesh, TEXT("Category"), TEXT("OfferingPitVariables"));
				MetaData->SetValue(NewProp_offeringPitMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_offeringPitMesh, TEXT("ModuleRelativePath"), TEXT("OfferingPit.h"));
				MetaData->SetValue(NewProp_offeringPitMesh, TEXT("ToolTip"), TEXT("@brief StatueVariables - The visual representation of this actor in 3D form.\n@param designatedMesh - Static mesh component 3D mesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AOfferingPit(Z_Construct_UClass_AOfferingPit, &AOfferingPit::StaticClass, TEXT("AOfferingPit"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AOfferingPit);
	UClass* Z_Construct_UClass_AOfferingStatue_NoRegister()
	{
		return AOfferingStatue::StaticClass();
	}
	UClass* Z_Construct_UClass_AOfferingStatue()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AOfferingStatue::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bItemOffered, AOfferingStatue, bool);
				UProperty* NewProp_bItemOffered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bItemOffered"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bItemOffered, AOfferingStatue), 0x0010000000020015, CPP_BOOL_PROPERTY_BITMASK(bItemOffered, AOfferingStatue), sizeof(bool), true);
				UProperty* NewProp_requiredItem = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("requiredItem"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(requiredItem, AOfferingStatue), 0x0010000000000015, Z_Construct_UEnum_Ava_Item());
				UProperty* NewProp_overlappingSphere = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("overlappingSphere"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(overlappingSphere, AOfferingStatue), 0x001000000008001d, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_OfferingItem = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OfferingItem"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OfferingItem, AOfferingStatue), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
				UProperty* NewProp_BuddaStatue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BuddaStatue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BuddaStatue, AOfferingStatue), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
				UProperty* NewProp_Alter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Alter, AOfferingStatue), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("OfferingStatue.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("OfferingStatue.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bItemOffered, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_bItemOffered, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_bItemOffered, TEXT("ModuleRelativePath"), TEXT("OfferingStatue.h"));
				MetaData->SetValue(NewProp_bItemOffered, TEXT("ToolTip"), TEXT("@brief StatueVariables -  check if the item has been offered.\n@param bItemOffered - boolean check."));
				MetaData->SetValue(NewProp_requiredItem, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_requiredItem, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_requiredItem, TEXT("ModuleRelativePath"), TEXT("OfferingStatue.h"));
				MetaData->SetValue(NewProp_requiredItem, TEXT("ToolTip"), TEXT("@brief StatueVariables -  required item to complete this puzzle.\n@param requiredItem - an Item placed in the scene."));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ModuleRelativePath"), TEXT("OfferingStatue.h"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ToolTip"), TEXT("@brief StatueVariables - Check if the player is currently overlapping the offering statue\n@param overlappingSphere - USphere Component for collision."));
				MetaData->SetValue(NewProp_OfferingItem, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_OfferingItem, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_OfferingItem, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_OfferingItem, TEXT("ModuleRelativePath"), TEXT("OfferingStatue.h"));
				MetaData->SetValue(NewProp_OfferingItem, TEXT("ToolTip"), TEXT("@brief StatueVariables - The visual representation of this actors offering item in 3D form.\nto be set when the player has offered item up.\n@param designatedMesh - Static mesh component 3D mesh."));
				MetaData->SetValue(NewProp_BuddaStatue, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_BuddaStatue, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_BuddaStatue, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BuddaStatue, TEXT("ModuleRelativePath"), TEXT("OfferingStatue.h"));
				MetaData->SetValue(NewProp_BuddaStatue, TEXT("ToolTip"), TEXT("@brief StatueVariables - The visual representation of this actors Budda statue in 3D form.\n@param designatedMesh - Static mesh component 3D mesh."));
				MetaData->SetValue(NewProp_Alter, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_Alter, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_Alter, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Alter, TEXT("ModuleRelativePath"), TEXT("OfferingStatue.h"));
				MetaData->SetValue(NewProp_Alter, TEXT("ToolTip"), TEXT("@brief StatueVariables - The visual representation of this actors alter in 3D form.\n@param designatedMesh - Static mesh component 3D mesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AOfferingStatue(Z_Construct_UClass_AOfferingStatue, &AOfferingStatue::StaticClass, TEXT("AOfferingStatue"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AOfferingStatue);
	UClass* Z_Construct_UClass_APaintingObject_NoRegister()
	{
		return APaintingObject::StaticClass();
	}
	UClass* Z_Construct_UClass_APaintingObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = APaintingObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPaintingFilled, APaintingObject, bool);
				UProperty* NewProp_bPaintingFilled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPaintingFilled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPaintingFilled, APaintingObject), 0x0010000000020015, CPP_BOOL_PROPERTY_BITMASK(bPaintingFilled, APaintingObject), sizeof(bool), true);
				UProperty* NewProp_ScrollItems = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScrollItems"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ScrollItems, APaintingObject), 0x0010000000000015);
				UProperty* NewProp_ScrollItems_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ScrollItems, TEXT("ScrollItems"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_APickUpItem_NoRegister());
				UProperty* NewProp_boxCollider = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("boxCollider"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(boxCollider, APaintingObject), 0x001000000008001d, Z_Construct_UClass_UBoxComponent_NoRegister());
				UProperty* NewProp_designatedMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("designatedMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(designatedMesh, APaintingObject), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PaintingObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("PaintingObject.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bPaintingFilled, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_bPaintingFilled, TEXT("Category"), TEXT("PaintingObjectVariables"));
				MetaData->SetValue(NewProp_bPaintingFilled, TEXT("ModuleRelativePath"), TEXT("PaintingObject.h"));
				MetaData->SetValue(NewProp_bPaintingFilled, TEXT("ToolTip"), TEXT("@brief PaintingObjectVariables - Check if painting has been filled.\n@param bPaintingFilled - boolean check."));
				MetaData->SetValue(NewProp_ScrollItems, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_ScrollItems, TEXT("Category"), TEXT("PaintingObjectVariables"));
				MetaData->SetValue(NewProp_ScrollItems, TEXT("ModuleRelativePath"), TEXT("PaintingObject.h"));
				MetaData->SetValue(NewProp_ScrollItems, TEXT("ToolTip"), TEXT("@brief PaintingObjectVariables - The PickUp Items that are required items for this particular\npuzzle which can be found round the black room. Pointers to the already spawned items.\n@param ScrollItems - An array of pick up items Actors."));
				MetaData->SetValue(NewProp_boxCollider, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("Category"), TEXT("PaintingObjectVariables"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("ModuleRelativePath"), TEXT("PaintingObject.h"));
				MetaData->SetValue(NewProp_boxCollider, TEXT("ToolTip"), TEXT("@brief PaintingObjectVariables - box collider which wil act as our root component for the object.\n@param boxCollider - this is box component which will be our root."));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("Category"), TEXT("PaintingObjectVariables"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ModuleRelativePath"), TEXT("PaintingObject.h"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ToolTip"), TEXT("@brief PaintingObjectVariables - The visual representation of this actor in 3D form.\n@param designatedMesh - Static mesh component 3D mesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_APaintingObject(Z_Construct_UClass_APaintingObject, &APaintingObject::StaticClass, TEXT("APaintingObject"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(APaintingObject);
	UClass* Z_Construct_UClass_AStatueObject_NoRegister()
	{
		return AStatueObject::StaticClass();
	}
	UClass* Z_Construct_UClass_AStatueObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AStatueObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanPlayerPray, AStatueObject, bool);
				UProperty* NewProp_bCanPlayerPray = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanPlayerPray"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanPlayerPray, AStatueObject), 0x0010000000020015, CPP_BOOL_PROPERTY_BITMASK(bCanPlayerPray, AStatueObject), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(isPlayerPraying, AStatueObject, bool);
				UProperty* NewProp_isPlayerPraying = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("isPlayerPraying"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(isPlayerPraying, AStatueObject), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(isPlayerPraying, AStatueObject), sizeof(bool), true);
				UProperty* NewProp_overlappingSphere = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("overlappingSphere"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(overlappingSphere, AStatueObject), 0x00100000000a001d, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_statueName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("statueName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(statueName, AStatueObject), 0x0010000000000005);
				UProperty* NewProp_designatedMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("designatedMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(designatedMesh, AStatueObject), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("StatueObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("StatueObject.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bCanPlayerPray, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_bCanPlayerPray, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_bCanPlayerPray, TEXT("ModuleRelativePath"), TEXT("StatueObject.h"));
				MetaData->SetValue(NewProp_bCanPlayerPray, TEXT("ToolTip"), TEXT("@brief StatueVariables - Check if the player can play at this current statue.\n@param bCanPlayerPray - boolean check."));
				MetaData->SetValue(NewProp_isPlayerPraying, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_isPlayerPraying, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_isPlayerPraying, TEXT("ModuleRelativePath"), TEXT("StatueObject.h"));
				MetaData->SetValue(NewProp_isPlayerPraying, TEXT("ToolTip"), TEXT("@brief StatueVariables - Check if the player is currently praying at the specified statue.\n@param isPlayerPraying - boolean check."));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ModuleRelativePath"), TEXT("StatueObject.h"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ToolTip"), TEXT("@brief StatueVariables - Check if the player is currently praying at the specified statue.\n@param overlappingSphere - USphere Component for collision."));
				MetaData->SetValue(NewProp_statueName, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_statueName, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_statueName, TEXT("ModuleRelativePath"), TEXT("StatueObject.h"));
				MetaData->SetValue(NewProp_statueName, TEXT("ToolTip"), TEXT("@brief StatueVariables - Name of the staue - Which room its in\n@param statueName - Used for debugging."));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("Category"), TEXT("StatueVariables"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ModuleRelativePath"), TEXT("StatueObject.h"));
				MetaData->SetValue(NewProp_designatedMesh, TEXT("ToolTip"), TEXT("@brief StatueVariables - The visual representation of this actor in 3D form.\n@param designatedMesh - Static mesh component 3D mesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AStatueObject(Z_Construct_UClass_AStatueObject, &AStatueObject::StaticClass, TEXT("AStatueObject"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AStatueObject);
	UClass* Z_Construct_UClass_APuzzle_NoRegister()
	{
		return APuzzle::StaticClass();
	}
	UClass* Z_Construct_UClass_APuzzle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = APuzzle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPuzzleComplete, APuzzle, bool);
				UProperty* NewProp_bPuzzleComplete = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPuzzleComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPuzzleComplete, APuzzle), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bPuzzleComplete, APuzzle), sizeof(bool), true);
				UProperty* NewProp_DesignatedDoor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DesignatedDoor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DesignatedDoor, APuzzle), 0x0010000000000015, Z_Construct_UClass_ADoor_NoRegister());
				UProperty* NewProp_DesignatedStatue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DesignatedStatue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DesignatedStatue, APuzzle), 0x0010000000000015, Z_Construct_UClass_AStatueObject_NoRegister());
				UProperty* NewProp_boxComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("boxComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(boxComponent, APuzzle), 0x001000000008001d, Z_Construct_UClass_UBoxComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Puzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Puzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bPuzzleComplete, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_bPuzzleComplete, TEXT("Category"), TEXT("PuzzleVariables"));
				MetaData->SetValue(NewProp_bPuzzleComplete, TEXT("ModuleRelativePath"), TEXT("Puzzle.h"));
				MetaData->SetValue(NewProp_bPuzzleComplete, TEXT("ToolTip"), TEXT("@brief PuzzleVariables - check if the puzzle has been completed.\n@param bPuzzleComplete - boolean check."));
				MetaData->SetValue(NewProp_DesignatedDoor, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_DesignatedDoor, TEXT("Category"), TEXT("PuzzleVariables"));
				MetaData->SetValue(NewProp_DesignatedDoor, TEXT("ModuleRelativePath"), TEXT("Puzzle.h"));
				MetaData->SetValue(NewProp_DesignatedDoor, TEXT("ToolTip"), TEXT("@brief PuzzleVariables - Each puzzle will require a door that is required to be opened\nthis is a pointer to an actor within the game.\n@param DesignatedDoor - an Instance of ADoor that is within the scene related to this puzzle."));
				MetaData->SetValue(NewProp_DesignatedStatue, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_DesignatedStatue, TEXT("Category"), TEXT("PuzzleVariables"));
				MetaData->SetValue(NewProp_DesignatedStatue, TEXT("ModuleRelativePath"), TEXT("Puzzle.h"));
				MetaData->SetValue(NewProp_DesignatedStatue, TEXT("ToolTip"), TEXT("@brief PuzzleVariables - Each puzzle will require a statue to pray at, this is a pointer to an actor within the game.\n@param DesignatedStatue - an Instance of AStatueObject that is within the scene related to this puzzle."));
				MetaData->SetValue(NewProp_boxComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_boxComponent, TEXT("Category"), TEXT("PuzzleVariables"));
				MetaData->SetValue(NewProp_boxComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_boxComponent, TEXT("ModuleRelativePath"), TEXT("Puzzle.h"));
				MetaData->SetValue(NewProp_boxComponent, TEXT("ToolTip"), TEXT("@brief PuzzleVariables - box collider which wil act as our root component for the puzzles.\n@param boxCollider - this is box component which will be our root."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_APuzzle(Z_Construct_UClass_APuzzle, &APuzzle::StaticClass, TEXT("APuzzle"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(APuzzle);
	UClass* Z_Construct_UClass_ABlackPuzzle_NoRegister()
	{
		return ABlackPuzzle::StaticClass();
	}
	UClass* Z_Construct_UClass_ABlackPuzzle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APuzzle();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = ABlackPuzzle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_painting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("painting"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(painting, ABlackPuzzle), 0x0040000000000015, Z_Construct_UClass_APaintingObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BlackPuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BlackPuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_painting, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_painting, TEXT("Category"), TEXT("BlackPuzzleVariables"));
				MetaData->SetValue(NewProp_painting, TEXT("ModuleRelativePath"), TEXT("BlackPuzzle.h"));
				MetaData->SetValue(NewProp_painting, TEXT("ToolTip"), TEXT("@brief BlackPuzzleVariables - The intended item to be filled in by the player by offering iutems found in the black room.\n@param painting - APaintingObject item that the player fills by dropping items."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ABlackPuzzle(Z_Construct_UClass_ABlackPuzzle, &ABlackPuzzle::StaticClass, TEXT("ABlackPuzzle"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ABlackPuzzle);
	UClass* Z_Construct_UClass_ABluePuzzle_NoRegister()
	{
		return ABluePuzzle::StaticClass();
	}
	UClass* Z_Construct_UClass_ABluePuzzle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APuzzle();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = ABluePuzzle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_pushPullObjectsTargets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("pushPullObjectsTargets"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(pushPullObjectsTargets, ABluePuzzle), 0x0010000000000015);
				UProperty* NewProp_pushPullObjectsTargets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_pushPullObjectsTargets, TEXT("pushPullObjectsTargets"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_ATriggerBox_NoRegister());
				UProperty* NewProp_pushPullObjects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("pushPullObjects"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(pushPullObjects, ABluePuzzle), 0x0010000000000015);
				UProperty* NewProp_pushPullObjects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_pushPullObjects, TEXT("pushPullObjects"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_APushPullItem_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BluePuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BluePuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_pushPullObjectsTargets, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_pushPullObjectsTargets, TEXT("Category"), TEXT("BluePuzzleVariables"));
				MetaData->SetValue(NewProp_pushPullObjectsTargets, TEXT("ModuleRelativePath"), TEXT("BluePuzzle.h"));
				MetaData->SetValue(NewProp_pushPullObjectsTargets, TEXT("ToolTip"), TEXT("@brief BluePuzzleVariables - the triggers that will show an event when overlapped with the item.\n@param pushPullObjectsTargets - An array of TriggerBox's."));
				MetaData->SetValue(NewProp_pushPullObjects, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_pushPullObjects, TEXT("Category"), TEXT("BluePuzzleVariables"));
				MetaData->SetValue(NewProp_pushPullObjects, TEXT("ModuleRelativePath"), TEXT("BluePuzzle.h"));
				MetaData->SetValue(NewProp_pushPullObjects, TEXT("ToolTip"), TEXT("@brief BluePuzzleVariables - the push and pull objects that can be found in the blue room, pointers to actors within the scene.\n@param pushPullObjects - An array of PushPullItem Actors."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ABluePuzzle(Z_Construct_UClass_ABluePuzzle, &ABluePuzzle::StaticClass, TEXT("ABluePuzzle"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ABluePuzzle);
	UClass* Z_Construct_UClass_AGreenPuzzle_NoRegister()
	{
		return AGreenPuzzle::StaticClass();
	}
	UClass* Z_Construct_UClass_AGreenPuzzle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APuzzle();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AGreenPuzzle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GreenPuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("GreenPuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGreenPuzzle(Z_Construct_UClass_AGreenPuzzle, &AGreenPuzzle::StaticClass, TEXT("AGreenPuzzle"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGreenPuzzle);
	UClass* Z_Construct_UClass_ARedPuzzle_NoRegister()
	{
		return ARedPuzzle::StaticClass();
	}
	UClass* Z_Construct_UClass_ARedPuzzle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APuzzle();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = ARedPuzzle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_offeringPit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("offeringPit"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(offeringPit, ARedPuzzle), 0x0040000000000015, Z_Construct_UClass_AOfferingPit_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("RedPuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("RedPuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_offeringPit, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_offeringPit, TEXT("Category"), TEXT("RedPuzzleVariables"));
				MetaData->SetValue(NewProp_offeringPit, TEXT("ModuleRelativePath"), TEXT("RedPuzzle.h"));
				MetaData->SetValue(NewProp_offeringPit, TEXT("ToolTip"), TEXT("@brief RedPuzzleVariables - The offering pit that is required for this particular puzzle as it's requirement for completion.\n@param offeringPit - An offering pit actor that contains the completion methods for this puzzle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ARedPuzzle(Z_Construct_UClass_ARedPuzzle, &ARedPuzzle::StaticClass, TEXT("ARedPuzzle"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ARedPuzzle);
	UClass* Z_Construct_UClass_AWhitePuzzle_NoRegister()
	{
		return AWhitePuzzle::StaticClass();
	}
	UClass* Z_Construct_UClass_AWhitePuzzle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APuzzle();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AWhitePuzzle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_secondDoorToOpen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("secondDoorToOpen"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(secondDoorToOpen, AWhitePuzzle), 0x0040000000000015, Z_Construct_UClass_ADoor_NoRegister());
				UProperty* NewProp_Offerings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Offerings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Offerings, AWhitePuzzle), 0x0040000000000015);
				UProperty* NewProp_Offerings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Offerings, TEXT("Offerings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AOfferingStatue_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("WhitePuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("WhitePuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_secondDoorToOpen, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_secondDoorToOpen, TEXT("Category"), TEXT("WhitePuzzleVariables"));
				MetaData->SetValue(NewProp_secondDoorToOpen, TEXT("ModuleRelativePath"), TEXT("WhitePuzzle.h"));
				MetaData->SetValue(NewProp_secondDoorToOpen, TEXT("ToolTip"), TEXT("@brief Unlike the other rooms, the white room requires two doors, one to open to the hallway.\nwhilst the other is to open the next room accross the hallway.\n@param secondDoorToOpen -ADoor actor."));
				MetaData->SetValue(NewProp_Offerings, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_Offerings, TEXT("Category"), TEXT("WhitePuzzleVariables"));
				MetaData->SetValue(NewProp_Offerings, TEXT("ModuleRelativePath"), TEXT("WhitePuzzle.h"));
				MetaData->SetValue(NewProp_Offerings, TEXT("ToolTip"), TEXT("@brief The offering statues that have required items for this particular puzzle which can be found round the white room.\n@param Offerings - An array of Offering Statue Actors."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AWhitePuzzle(Z_Construct_UClass_AWhitePuzzle, &AWhitePuzzle::StaticClass, TEXT("AWhitePuzzle"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AWhitePuzzle);
	UClass* Z_Construct_UClass_AYellowPuzzle_NoRegister()
	{
		return AYellowPuzzle::StaticClass();
	}
	UClass* Z_Construct_UClass_AYellowPuzzle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APuzzle();
			Z_Construct_UPackage__Script_Ava();
			OuterClass = AYellowPuzzle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_requiredWaitingTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("requiredWaitingTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(requiredWaitingTime, AYellowPuzzle), 0x0010000000000015);
				UProperty* NewProp_ThroneItem = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ThroneItem"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThroneItem, AYellowPuzzle), 0x0010000000000015, Z_Construct_UClass_APickUpItem_NoRegister());
				UProperty* NewProp_overlappingSphere = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("overlappingSphere"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(overlappingSphere, AYellowPuzzle), 0x001000000008001d, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_waitingPlatform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("waitingPlatform"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(waitingPlatform, AYellowPuzzle), 0x001000000008001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("YellowPuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("YellowPuzzle.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_requiredWaitingTime, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_requiredWaitingTime, TEXT("Category"), TEXT("YellowPuzzleVariables"));
				MetaData->SetValue(NewProp_requiredWaitingTime, TEXT("ModuleRelativePath"), TEXT("YellowPuzzle.h"));
				MetaData->SetValue(NewProp_requiredWaitingTime, TEXT("ToolTip"), TEXT("@brief YellowPuzzleVariables - The intended wait time for the user\n@param requiredWaitingTime - Time required for the player to wait to complete the game."));
				MetaData->SetValue(NewProp_ThroneItem, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_ThroneItem, TEXT("Category"), TEXT("YellowPuzzleVariables"));
				MetaData->SetValue(NewProp_ThroneItem, TEXT("ModuleRelativePath"), TEXT("YellowPuzzle.h"));
				MetaData->SetValue(NewProp_ThroneItem, TEXT("ToolTip"), TEXT("@brief YellowPuzzleVariables - The intended item to be picked up by the user.\nartists to choose where to place.\n@param ThroneItem - APickUpItem item that the play picks up by waiting."));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("Category"), TEXT("YellowPuzzleVariables"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ModuleRelativePath"), TEXT("YellowPuzzle.h"));
				MetaData->SetValue(NewProp_overlappingSphere, TEXT("ToolTip"), TEXT("@brief YellowPuzzleVariables - Colliding sphere to indicate to us when the player will hit the mat\nAlign with the waiting platform static mesh that the artists decide.\n@param overlappingSphere - this is the overlapping sphere."));
				MetaData->SetValue(NewProp_waitingPlatform, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_waitingPlatform, TEXT("Category"), TEXT("YellowPuzzleVariables"));
				MetaData->SetValue(NewProp_waitingPlatform, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_waitingPlatform, TEXT("ModuleRelativePath"), TEXT("YellowPuzzle.h"));
				MetaData->SetValue(NewProp_waitingPlatform, TEXT("ToolTip"), TEXT("@brief YellowPuzzleVariables - this is the static mesh component which the\nplayer needs to stand on, the overlappingsphere to match the size of this.\nMesh inteded to be a circle mat.\n@param waitingPlatform - mesh for platform"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AYellowPuzzle(Z_Construct_UClass_AYellowPuzzle, &AYellowPuzzle::StaticClass, TEXT("AYellowPuzzle"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AYellowPuzzle);
	UPackage* Z_Construct_UPackage__Script_Ava()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Ava")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x4210E0BA;
			Guid.B = 0x6B472762;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
